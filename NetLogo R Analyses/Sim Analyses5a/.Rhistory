?sapply
install.packages(c("babynames", "curl", "Hmisc", "R.oo", "shiny"))
?for
?sapply
x <- 2
for(x in 1:3) {
x + 10
}
x
y <- c()
for(x in 1:3) {
y <- c(y, x + 10)
}
y
for(x in 1:3) {
y <- c(y, x + 10) ;
}
?randomforest
??randomforest
?randomForest
??randomForest
x <- 2
install.packages(c("caret", "cluster", "curl", "devtools", "forecast", "lme4", "lubridate", "Matrix", "nlme", "pegas", "R.utils", "RcppArmadillo", "sp", "spdep", "survival", "swirl", "testthat", "vegan"))
install.packages(c("cluster", "sp"))
setwd("~/Google Drive/Semester 8/Thesis/NetLogo+R GitHub/NetLogo R Analyses/Sim Analyses5")
all.data <- read.csv("Bees sim_all5-table.csv", skip = 6, stringsAsFactors=FALSE)
View(all.data)
library("lme4", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
??lmer
View(all.data)
comm.data <- all.data %>% filter(communication == TRUE)
# New table for dance and random avg quality
dance.data <- data.frame(energy.avg = comm.data$dance.avg, environment = comm.data$environment,
communication = comm.data$communication, population = comm.data$population,
repetitions = comm.data$repetitions, id.method = rep("dance", length(comm.data[,1])))
random.data <- data.frame(energy.avg = comm.data$random.avg, environment = comm.data$environment,
communication = comm.data$communication, population = comm.data$population,
repetitions = comm.data$repetitions, id.method = rep("random", length(comm.data[,1])))
avg.data <- rbind(dance.data, random.data)
library(dplyr)
comm.data <- all.data %>% filter(communication == TRUE)
# New table for dance and random avg quality
dance.data <- data.frame(energy.avg = comm.data$dance.avg, environment = comm.data$environment,
communication = comm.data$communication, population = comm.data$population,
repetitions = comm.data$repetitions, id.method = rep("dance", length(comm.data[,1])))
random.data <- data.frame(energy.avg = comm.data$random.avg, environment = comm.data$environment,
communication = comm.data$communication, population = comm.data$population,
repetitions = comm.data$repetitions, id.method = rep("random", length(comm.data[,1])))
avg.data <- rbind(dance.data, random.data)
# Data calculation
all.data$energy.bee <- all.data$hive.collected / all.data$population
all.data$log.energy.bee <- log(all.data$energy.bee)
all.data$energy.trip <- all.data$hive.collected / all.data$foraged.count
all.data$log.energy.trip <- log(all.data$energy.trip)
all.data$dance.avg <- all.data$dance.quality / all.data$dance.quantity
all.data$random.avg <- all.data$random.quality / all.data$random.quantity
all.data$avg.diff <-all.data$dance.avg - all.data$random.avg
# Data cleanup
names(all.data)[4] <- "communication"
all.data$communication <- as.factor(all.data$communication)
all.data$population <- as.factor(all.data$population)
all.data$environment <- as.factor(sapply(1:nrow(all.data),
function(i) {i <- paste(substr(all.data$resource_density[i],2,2),
": ", substr(all.data$R_value[i], 2,4),
sep = "")}))
# Comm
comm.data <- all.data %>% filter(communication == TRUE)
# New table for dance and random avg quality
dance.data <- data.frame(energy.avg = comm.data$dance.avg, environment = comm.data$environment,
communication = comm.data$communication, population = comm.data$population,
repetitions = comm.data$repetitions, id.method = rep("dance", length(comm.data[,1])))
random.data <- data.frame(energy.avg = comm.data$random.avg, environment = comm.data$environment,
communication = comm.data$communication, population = comm.data$population,
repetitions = comm.data$repetitions, id.method = rep("random", length(comm.data[,1])))
avg.data <- rbind(dance.data, random.data)
View(avg.data)
View(all.data)
names(all.data)[19]
names(all.data)[19] <- "max.dist"
all.data$max.dist.km <- all.data$max.dist * 6.67 / 1000
boxplot(max.dist.km ~ communication+population+environment, data=all.data,
col = c("green", "red", "brown", "blue"), las = 2, cex.axis = 0.8, main = "",
xlab = "Resource distribution (R value) and density", ylab = "Kilometers",
names = c("0.4", "0.4", "0.4", "0.4",
"0.6", "0.6", "0.6", "0.6",
"0.8", "0.8", "0.8", "0.8",
"1.0", "1.0", "1.0", "1.0",
"0.4", "0.4", "0.4", "0.4",
"0.6", "0.6", "0.6", "0.6",
"0.8", "0.8", "0.8", "0.8",
"1.0", "1.0", "1.0", "1.0"))
library(dplyr)
library(lme4)
# setwd("~/Google Drive/Semester 8/Thesis/NetLogo+R GitHub/NetLogo R Analyses/Sim Analyses5")
# Simulation data
all.data <- read.csv("Bees sim_all5-table.csv", skip = 6, stringsAsFactors=FALSE)
# Data cleanup
names(all.data)[4] <- "communication"
all.data$communication <- as.factor(all.data$communication)
all.data$population <- as.factor(all.data$population)
all.data$environment <- as.factor(sapply(1:nrow(all.data),
function(i) {i <- paste(substr(all.data$resource_density[i],2,2),
": ", substr(all.data$R_value[i], 2,4),
sep = "")}))
names(all.data)[19] <- "max.dist"
# Data calculation
all.data$energy.bee <- all.data$hive.collected / all.data$population
all.data$log.energy.bee <- log(all.data$energy.bee)
all.data$energy.trip <- all.data$hive.collected / all.data$foraged.count
all.data$log.energy.trip <- log(all.data$energy.trip)
all.data$dance.avg <- all.data$dance.quality / all.data$dance.quantity
all.data$random.avg <- all.data$random.quality / all.data$random.quantity
all.data$avg.diff <- all.data$dance.avg - all.data$random.avg
all.data$max.dist.km <- all.data$max.dist * 6.67 / 1000
# Comm
comm.data <- all.data %>% filter(communication == TRUE)
# New table for dance and random avg quality
dance.data <- data.frame(energy.avg = comm.data$dance.avg, environment = comm.data$environment,
communication = comm.data$communication, population = comm.data$population,
repetitions = comm.data$repetitions, id.method = rep("dance", length(comm.data[,1])))
random.data <- data.frame(energy.avg = comm.data$random.avg, environment = comm.data$environment,
communication = comm.data$communication, population = comm.data$population,
repetitions = comm.data$repetitions, id.method = rep("random", length(comm.data[,1])))
avg.data <- rbind(dance.data, random.data)
boxplot(energy.bee ~ communication+population+environment, data=all.data,
col = c("green", "red", "brown", "blue"), las = 2, main = "", cex.axis = 0.8,
xlab = "Resource distribution (R value) and density", ylab = "Energy(J) collected/bee",
names = c("0.4", "0.4", "0.4", "0.4",
"0.6", "0.6", "0.6", "0.6",
"0.8", "0.8", "0.8", "0.8",
"1.0", "1.0", "1.0", "1.0",
"0.4", "0.4", "0.4", "0.4",
"0.6", "0.6", "0.6", "0.6",
"0.8", "0.8", "0.8", "0.8",
"1.0", "1.0", "1.0", "1.0"))
legend("topright", pch = 15, cex = 0.8, col = c("green", "red", "brown", "blue"),
c("Comm=F, Pop=500", "Comm=T, Pop=500", "Comm=F, Pop=3000", "Comm=T, Pop=3000"))
axis(1, at = c(0.5, 16.5, 32.5), labels = c("", "", ""), line = 2.05)
axis(1, at = c(8, 24), labels = c("Dense", "Sparse"), line = 0.9, tick = FALSE, cex.axis = 0.8)
boxplot(energy.bee ~ communication+population+environment, data=all.data,
col = c("green", "red", "brown", "blue"), las = 2, main = "", cex.axis = 0.8,
xlab = "Resource distribution (R value) and density", ylab = "Energy(J) collected/bee",
names = c("0.4", "0.4", "0.4", "0.4",
"0.6", "0.6", "0.6", "0.6",
"0.8", "0.8", "0.8", "0.8",
"1.0", "1.0", "1.0", "1.0",
"0.4", "0.4", "0.4", "0.4",
"0.6", "0.6", "0.6", "0.6",
"0.8", "0.8", "0.8", "0.8",
"1.0", "1.0", "1.0", "1.0"))
boxplot(energy.bee ~ communication+population+environment, data=all.data,
col = c("green", "red", "brown", "blue"), las = 2, main = "", cex.axis = 0.8,
xlab = "Resource distribution (R value) and density", ylab = "Energy(J) collected/bee",
names = c("0.4", "0.4", "0.4", "0.4",
"0.6", "0.6", "0.6", "0.6",
"0.8", "0.8", "0.8", "0.8",
"1.0", "1.0", "1.0", "1.0",
"0.4", "0.4", "0.4", "0.4",
"0.6", "0.6", "0.6", "0.6",
"0.8", "0.8", "0.8", "0.8",
"1.0", "1.0", "1.0", "1.0"))
boxplot(energy.bee ~ communication+population+environment, data=all.data,
col = c("green", "red", "brown", "blue"), las = 2, main = "", cex.axis = 0.8, ylim = c(0, 200),
xlab = "Resource distribution (R value) and density", ylab = "Energy(J) collected/bee",
names = c("0.4", "0.4", "0.4", "0.4",
"0.6", "0.6", "0.6", "0.6",
"0.8", "0.8", "0.8", "0.8",
"1.0", "1.0", "1.0", "1.0",
"0.4", "0.4", "0.4", "0.4",
"0.6", "0.6", "0.6", "0.6",
"0.8", "0.8", "0.8", "0.8",
"1.0", "1.0", "1.0", "1.0"))
legend("topright", pch = 15, cex = 0.8, col = c("green", "red", "brown", "blue"),
c("Comm=F, Pop=500", "Comm=T, Pop=500", "Comm=F, Pop=3000", "Comm=T, Pop=3000"))
axis(1, at = c(0.5, 16.5, 32.5), labels = c("", "", ""), line = 2.05)
axis(1, at = c(8, 24), labels = c("Dense", "Sparse"), line = 0.9, tick = FALSE, cex.axis = 0.8)
boxplot(energy.bee ~ communication+population+environment, data=all.data,
col = c("green", "red", "brown", "blue"), las = 2, main = "", cex.axis = 0.8, ylim = c(0, 1200),
xlab = "Resource distribution (R value) and density", ylab = "Energy(J) collected/bee",
names = c("0.4", "0.4", "0.4", "0.4",
"0.6", "0.6", "0.6", "0.6",
"0.8", "0.8", "0.8", "0.8",
"1.0", "1.0", "1.0", "1.0",
"0.4", "0.4", "0.4", "0.4",
"0.6", "0.6", "0.6", "0.6",
"0.8", "0.8", "0.8", "0.8",
"1.0", "1.0", "1.0", "1.0"))
legend("topright", pch = 15, cex = 0.8, col = c("green", "red", "brown", "blue"),
c("Comm=F, Pop=500", "Comm=T, Pop=500", "Comm=F, Pop=3000", "Comm=T, Pop=3000"))
axis(1, at = c(0.5, 16.5, 32.5), labels = c("", "", ""), line = 2.05)
axis(1, at = c(8, 24), labels = c("Dense", "Sparse"), line = 0.9, tick = FALSE, cex.axis = 0.8)
boxplot(energy.bee ~ communication+population+environment, data=all.data, log = "y",
col = c("green", "red", "brown", "blue"), las = 2, main = "", cex.axis = 0.8,
xlab = "Resource distribution (R value) and density", ylab = "Energy(J) collected/bee",
names = c("0.4", "0.4", "0.4", "0.4",
"0.6", "0.6", "0.6", "0.6",
"0.8", "0.8", "0.8", "0.8",
"1.0", "1.0", "1.0", "1.0",
"0.4", "0.4", "0.4", "0.4",
"0.6", "0.6", "0.6", "0.6",
"0.8", "0.8", "0.8", "0.8",
"1.0", "1.0", "1.0", "1.0"))
legend("topright", pch = 15, cex = 0.8, col = c("green", "red", "brown", "blue"),
c("Comm=F, Pop=500", "Comm=T, Pop=500", "Comm=F, Pop=3000", "Comm=T, Pop=3000"))
axis(1, at = c(0.5, 16.5, 32.5), labels = c("", "", ""), line = 2.05)
axis(1, at = c(8, 24), labels = c("Dense", "Sparse"), line = 0.9, tick = FALSE, cex.axis = 0.8)
all.data <- read.csv("Bees sim_all5-table.csv", skip = 6, stringsAsFactors=FALSE)
all.data <- all.data %>% filter(resource_density == "\"sparse\"")
library(dplyr)
library(lme4)
all.data <- all.data %>% filter(resource_density == "\"sparse\"")
# Data names
names(all.data)[4] <- "communication"
names(all.data)[19] <- "max.dist"
# Data calculation
all.data$energy.bee <- all.data$hive.collected / all.data$population
all.data$log.energy.bee <- log(all.data$energy.bee)
all.data$energy.trip <- all.data$hive.collected / all.data$foraged.count
all.data$log.energy.trip <- log(all.data$energy.trip)
all.data$dance.avg <- all.data$dance.quality / all.data$dance.quantity
all.data$random.avg <- all.data$random.quality / all.data$random.quantity
all.data$avg.diff <- all.data$dance.avg - all.data$random.avg
all.data$max.dist.km <- all.data$max.dist * 6.67 / 1000
# Data cleanup
all.data$communication <- as.factor(all.data$communication)
all.data$population <- as.factor(all.data$population)
all.data$environment <- as.factor(sapply(1:nrow(all.data),
function(i) {i <- paste(substr(all.data$resource_density[i],2,2),
": ", substr(all.data$R_value[i], 2,4),
sep = "")}))
# Comm
comm.data <- all.data %>% filter(communication == TRUE)
# New table for dance and random avg quality
dance.data <- data.frame(energy.avg = comm.data$dance.avg, environment = comm.data$environment,
communication = comm.data$communication, population = comm.data$population,
repetitions = comm.data$repetitions, id.method = rep("dance", length(comm.data[,1])))
random.data <- data.frame(energy.avg = comm.data$random.avg, environment = comm.data$environment,
communication = comm.data$communication, population = comm.data$population,
repetitions = comm.data$repetitions, id.method = rep("random", length(comm.data[,1])))
avg.data <- rbind(dance.data, random.data)
boxplot(energy.bee ~ communication+population+environment, data=all.data,
col = c("green", "red", "brown", "blue"), las = 2, main = "", cex.axis = 0.8,
xlab = "Resource distribution (R value) and density", ylab = "Energy(J) collected/bee",
names = c("0.4", "0.4", "0.4", "0.4",
"0.6", "0.6", "0.6", "0.6",
"0.8", "0.8", "0.8", "0.8",
"1.0", "1.0", "1.0", "1.0",
"0.4", "0.4", "0.4", "0.4",
"0.6", "0.6", "0.6", "0.6",
"0.8", "0.8", "0.8", "0.8",
"1.0", "1.0", "1.0", "1.0"))
boxplot(energy.bee ~ communication+population+environment, data=all.data,
col = c("green", "red", "brown", "blue"), las = 2, main = "", cex.axis = 0.8,
xlab = "Resource distribution (R value) and density", ylab = "Energy(J) collected/bee")
boxplot(energy.bee ~ communication+population+environment, data=all.data,
col = c("green", "red", "brown", "blue"), las = 2, main = "", cex.axis = 0.8,
xlab = "Resource distribution (R value) and density", ylab = "Energy(J) collected/bee",
names = c("0.4", "0.4", "0.4", "0.4",
"0.6", "0.6", "0.6", "0.6",
"0.8", "0.8", "0.8", "0.8",
"1.0", "1.0", "1.0", "1.0"))
all.data$environment <- as.factor(sapply(1:nrow(all.data),
function(i) {i <- substr(all.data$R_value[i], 2,4)}))
setwd("~/Google Drive/Semester 8/Thesis/NetLogo+R GitHub/BehaviorSpace Data/R Value/")
g.data <- read.csv("Bees R extra_sparse testing1-table.csv", header = TRUE, skip = 6)[,c(2,3,4,5,8)]
View(g.data)
g.data <- read.csv("Bees R extra_sparse testing1-table.csv", header = TRUE, skip = 6)
g.data <- g.data %>% filter(c1_mult >= c2_mult)
g.data.dense.4 <- g.data.dense %>% filter(abs(R - 0.4) <= 0.03)
g.data.dense.6 <- g.data.dense %>% filter(abs(R - 0.6) <= 0.03)
g.data.dense.8 <- g.data.dense %>% filter(abs(R - 0.8) <= 0.03)
# Sparse
g.data.sparse.4 <- g.data.sparse %>% filter(abs(R - 0.4) <= 0.03)
g.data.sparse.6 <- g.data.sparse %>% filter(abs(R - 0.6) <= 0.03)
g.data.sparse.8 <- g.data.sparse %>% filter(abs(R - 0.8) <= 0.03)
# Extra-sparse
g.data.e.sparse.4 <- g.data.e.sparse %>% filter(abs(R - 0.4) <= 0.03)
g.data.e.sparse.6 <- g.data.e.sparse %>% filter(abs(R - 0.6) <= 0.03)
g.data.e.sparse.8 <- g.data.e.sparse %>% filter(abs(R - 0.8) <= 0.03)
library(dplyr)
g.data.dense.4 <- g.data.dense %>% filter(abs(R - 0.4) <= 0.03)
g.data.dense.6 <- g.data.dense %>% filter(abs(R - 0.6) <= 0.03)
g.data.dense.8 <- g.data.dense %>% filter(abs(R - 0.8) <= 0.03)
# Sparse
g.data.sparse.4 <- g.data.sparse %>% filter(abs(R - 0.4) <= 0.03)
g.data.sparse.6 <- g.data.sparse %>% filter(abs(R - 0.6) <= 0.03)
g.data.sparse.8 <- g.data.sparse %>% filter(abs(R - 0.8) <= 0.03)
# Extra-sparse
g.data.e.sparse.4 <- g.data.e.sparse %>% filter(abs(R - 0.4) <= 0.03)
g.data.e.sparse.6 <- g.data.e.sparse %>% filter(abs(R - 0.6) <= 0.03)
g.data.e.sparse.8 <- g.data.e.sparse %>% filter(abs(R - 0.8) <= 0.03)
g.data <- g.data %>% filter(c1_mult >= c2_mult)
g.data.dense <- filter(g.data, g.data$resource_density == "\"dense\"")
g.data.dense.r <- g.data.dense$R
g.data.sparse <- filter(g.data, g.data$resource_density == "\"sparse\"")
g.data.sparse.r <- g.data.sparse$R
g.data.e.sparse <- filter(g.data, g.data$resource_density == "\"sparse\"")
g.data.e.sparse.r <- g.data.e.sparse$R
g.data.e.sparse <- filter(g.data, g.data$resource_density == "\"extra_sparse\"")
g.data.e.sparse.r <- g.data.e.sparse$R
g.data.e.sparse.4 <- g.data.e.sparse %>% filter(abs(R - 0.4) <= 0.03)
g.data.e.sparse.6 <- g.data.e.sparse %>% filter(abs(R - 0.6) <= 0.03)
g.data.e.sparse.8 <- g.data.e.sparse %>% filter(abs(R - 0.8) <= 0.03)
View(g.data.e.sparse.4)
g.data.e.sparse.4 <- g.data.e.sparse %>% filter(abs(R - 0.4) <= 0.05)
View(g.data.e.sparse.4)
g.data.e.sparse.4 <- g.data.e.sparse %>% filter(abs(R - 0.4) <= 0.07)
View(g.data.e.sparse.4)
View(g.data.e.sparse.6)
g.data <- read.csv("Bees R extra_sparse testing1-table.csv", header = TRUE, skip = 6)
g.data.e.sparse <- filter(g.data, g.data$resource_density == "\"extra_sparse\"")
g.data.e.sparse.r <- g.data.e.sparse$R
g.data.e.sparse$grp <- (floor((g.data.e.sparse$X.run.number.-1) / 7)) + 1
g.data <- read.csv("Bees R extra_sparse testing1-table.csv", header = TRUE, skip = 6)
g.data.e.sparse <- filter(g.data, g.data$resource_density == "\"extra_sparse\"")
g.data.e.sparse.r <- g.data.e.sparse$R
g.data.e.sparse$grp <- (floor((g.data.e.sparse$X.run.number.-1) / 7)) + 1
View(g.data.e.sparse)
g.data.e.sparse <- g.data.e.sparse %>% filter(c1_mult >= c2_mult)
g.data.e.sparse.4 <- g.data.e.sparse %>% filter(abs(R - 0.4) <= 0.07)
g.data.e.sparse.6 <- g.data.e.sparse %>% filter(abs(R - 0.6) <= 0.03)
g.data.e.sparse.8 <- g.data.e.sparse %>% filter(abs(R - 0.8) <= 0.03)
table(g.data.e.sparse.6$grp)
data.e.sparse <- filter(g.data, g.data$resource_density == "\"extra_sparse\"")
data.e.sparse.r <- data.e.sparse$R
data.e.sparse$grp <- (floor((data.e.sparse$X.run.number.-1) / 7)) + 1
data.e.sparse <- data.e.sparse %>% filter(c1_mult >= c2_mult)
g.data <- read.csv("Bees R extra_sparse testing1-table.csv", header = TRUE, skip = 6)
## Filter data by dense and sparse
data.e.sparse <- filter(g.data, g.data$resource_density == "\"extra_sparse\"")
data.e.sparse.r <- data.e.sparse$R
data.e.sparse$grp <- (floor((data.e.sparse$X.run.number.-1) / 7)) + 1
data.e.sparse <- data.e.sparse %>% filter(c1_mult >= c2_mult)
temp.6 <- which.max(table(data.e.sparse.6$grp))
es.idx.6 <- (7 * as.numeric(names(temp.6)))
data.e.sparse.6 <- data.e.sparse %>% filter(abs(R - 0.6) <= 0.03)
table(g.data.e.sparse.6$grp)
temp.6 <- which.max(table(data.e.sparse.6$grp))
es.idx.6 <- (7 * as.numeric(names(temp.6)))
g.data[es.idx.6]
g.data[es.idx.6,]
View(data.e.sparse)
table(g.data.e.sparse.6$grp)
table(data.e.sparse.6$grp)
View(data.e.sparse)
data.e.sparse.8 <- data.e.sparse %>% filter(abs(R - 0.8) <= 0.03)
table(data.e.sparse.8$grp)
temp.8 <- which.max(table(data.e.sparse.8$grp))
es.idx.8 <- (7 * as.numeric(names(temp.8)))
View(data.e.sparse.8)
View(data.e.sparse)
setwd("~/Google Drive/Semester 8/Thesis/NetLogo+R GitHub/NetLogo R Analyses/Sim Analyses5")
library(lme4)
library(dplyr)
all.data <- read.csv("Bees sim_all5-table.csv", skip = 6, stringsAsFactors=FALSE)
# Data names
names(all.data)[4] <- "communication"
names(all.data)[19] <- "max.dist"
# Data calculation
all.data$energy.bee <- all.data$hive.collected / all.data$population
all.data$log.energy.bee <- log(all.data$energy.bee)
all.data$energy.trip <- all.data$hive.collected / all.data$foraged.count
all.data$log.energy.trip <- log(all.data$energy.trip)
all.data$dance.avg <- all.data$dance.quality / all.data$dance.quantity
all.data$random.avg <- all.data$random.quality / all.data$random.quantity
all.data$avg.diff <- all.data$dance.avg - all.data$random.avg
all.data$max.dist.km <- all.data$max.dist * 6.67 / 1000
# Data cleanup
all.data$communication <- as.factor(all.data$communication)
all.data$population <- as.factor(all.data$population)
all.data$environment <- as.factor(sapply(1:nrow(all.data),
function(i) {i <- paste(substr(all.data$resource_density[i],2,2),
": ", substr(all.data$R_value[i], 2,4),
sep = "")}))
setwd("~/Google Drive/Semester 8/Thesis/NetLogo+R GitHub/NetLogo R Analyses/Sim Analyses5a")
all.data <- read.csv("Bees sim_all5-table.csv", skip = 6, stringsAsFactors=FALSE)
# Data names
names(all.data)[4] <- "communication"
names(all.data)[19] <- "max.dist"
# Data calculation
all.data$energy.bee <- all.data$hive.collected / all.data$population
all.data$log.energy.bee <- log(all.data$energy.bee)
all.data$energy.trip <- all.data$hive.collected / all.data$foraged.count
all.data$log.energy.trip <- log(all.data$energy.trip)
all.data$dance.avg <- all.data$dance.quality / all.data$dance.quantity
all.data$random.avg <- all.data$random.quality / all.data$random.quantity
all.data$avg.diff <- all.data$dance.avg - all.data$random.avg
all.data$max.dist.km <- all.data$max.dist * 6.67 / 1000
# Data cleanup
all.data$communication <- as.factor(all.data$communication)
all.data$population <- as.factor(all.data$population)
all.data$environment <- as.factor(sapply(1:nrow(all.data),
function(i) {i <- paste(substr(all.data$resource_density[i],2,2),
": ", substr(all.data$R_value[i], 2,4),
sep = "")}))
min(all.data$hive.collected)
max(all.data$hive.collected)
min(all.data$foraged.count)
max(all.data$foraged.count)
class(all.data$resource_density)
factor(all.data$resource_density)
all.data$resource_density[1]
all.data %>% filter(population == "500")
all.data %>% filter(population == "500")[,1]
all.data %>% filter(population == "500")
# Simulation data
all.data <- read.csv("Bees sim_all5-table.csv", skip = 6, stringsAsFactors=FALSE)
# Data names
names(all.data)[4] <- "communication"
names(all.data)[19] <- "max.dist"
# Data calculation
all.data$energy.bee <- all.data$hive.collected / all.data$population
all.data$log.energy.bee <- log(all.data$energy.bee)
all.data$energy.trip <- all.data$hive.collected / all.data$foraged.count
all.data$log.energy.trip <- log(all.data$energy.trip)
all.data$dance.avg <- all.data$dance.quality / all.data$dance.quantity
all.data$random.avg <- all.data$random.quality / all.data$random.quantity
all.data$avg.diff <- all.data$dance.avg - all.data$random.avg
all.data$max.dist.km <- all.data$max.dist * 6.67 / 1000
# Data cleanup
all.data$resource_density <- as.factor(all.data$resource_density)
all.data$R_value <- as.factor(all.data$R_value)
all.data$communication <- as.factor(all.data$communication)
all.data$population <- as.factor(all.data$population)
all.data$environment <- as.factor(sapply(1:nrow(all.data),
function(i) {i <- paste(substr(all.data$resource_density[i],2,2),
": ", substr(all.data$R_value[i], 2,4),
sep = "")}))
# Comm
comm.data <- all.data %>% filter(communication == TRUE)
# New table for dance and random avg quality
dance.data <- data.frame(energy.avg = comm.data$dance.avg, environment = comm.data$environment,
communication = comm.data$communication, population = comm.data$population,
repetitions = comm.data$repetitions, id.method = rep("dance", length(comm.data[,1])))
random.data <- data.frame(energy.avg = comm.data$random.avg, environment = comm.data$environment,
communication = comm.data$communication, population = comm.data$population,
repetitions = comm.data$repetitions, id.method = rep("random", length(comm.data[,1])))
avg.data <- rbind(dance.data, random.data)
library(dplyr)
library(lme4)
all.data <- read.csv("Bees sim_all5-table.csv", skip = 6, stringsAsFactors=FALSE)
# Data names
names(all.data)[4] <- "communication"
names(all.data)[19] <- "max.dist"
# Data calculation
all.data$energy.bee <- all.data$hive.collected / all.data$population
all.data$log.energy.bee <- log(all.data$energy.bee)
all.data$energy.trip <- all.data$hive.collected / all.data$foraged.count
all.data$log.energy.trip <- log(all.data$energy.trip)
all.data$dance.avg <- all.data$dance.quality / all.data$dance.quantity
all.data$random.avg <- all.data$random.quality / all.data$random.quantity
all.data$avg.diff <- all.data$dance.avg - all.data$random.avg
all.data$max.dist.km <- all.data$max.dist * 6.67 / 1000
# Data cleanup
all.data$resource_density <- as.factor(all.data$resource_density)
all.data$R_value <- as.factor(all.data$R_value)
all.data$communication <- as.factor(all.data$communication)
all.data$population <- as.factor(all.data$population)
all.data$environment <- as.factor(sapply(1:nrow(all.data),
function(i) {i <- paste(substr(all.data$resource_density[i],2,2),
": ", substr(all.data$R_value[i], 2,4),
sep = "")}))
# Comm
comm.data <- all.data %>% filter(communication == TRUE)
# New table for dance and random avg quality
dance.data <- data.frame(energy.avg = comm.data$dance.avg, environment = comm.data$environment,
communication = comm.data$communication, population = comm.data$population,
repetitions = comm.data$repetitions, id.method = rep("dance", length(comm.data[,1])))
random.data <- data.frame(energy.avg = comm.data$random.avg, environment = comm.data$environment,
communication = comm.data$communication, population = comm.data$population,
repetitions = comm.data$repetitions, id.method = rep("random", length(comm.data[,1])))
avg.data <- rbind(dance.data, random.data)
alt.1c <- lmer(log.energy.bee ~ population+resource_density*communication+(1|repetitions), data = all.data)
anova(lmer(log.energy.bee ~ population+resource_density+communication+(1|repetitions), data = all.data), alt.1c)
anova(lmer(log.energy.bee ~ population+resource_density+communication+(1|repetitions), data = all.data),
lmer(log.energy.bee ~ population+resource_density*communication+(1|repetitions)))
anova(lmer(log.energy.bee ~ population+resource_density+communication+(1|repetitions), data = all.data),
lmer(log.energy.bee ~ population+resource_density*communication+(1|repetitions), data = all.data))
