d.data.all[d.idx.8,]
d.data.all[800,]
d.data.8 <- d.data %>% filter(abs(R - 0.8) <= 0.01)
temp.8 <- which.max(table(d.data.8$grp)) # Best sequence is d.data.all[821:840,]
d.idx.8 <- 20 * as.numeric(names(temp.8))
d.data.all[d.idx.8,]
d.num <- 0.01
d.data.4 <- d.data %>% filter(abs(R - 0.4) <= d.num)
temp.4 <- which.max(table(d.data.4$grp))
d.idx.4 <- (20 * as.numeric(names(temp.4))) # Best sequence is d.data.all[3941:3960,]
d.data.all[d.idx.4,]
d.data.6 <- d.data %>% filter(abs(R - 0.6) <= d.num)
temp.6 <- which.max(table(d.data.6$grp)) # Best sequence is d.data.all[1581:1600,]
d.idx.6 <- 20 * as.numeric(names(temp.6))
d.data.all[d.idx.6,]
d.data.8 <- d.data %>% filter(abs(R - 0.8) <= d.num)
temp.8 <- which.max(table(d.data.8$grp)) # Best sequence is d.data.all[821:840,]
d.idx.8 <- 20 * as.numeric(names(temp.8))
d.data.all[d.idx.8,]
s.data.all <- read.csv("Bees R sparse testing_10rep-table.csv", header = TRUE, skip = 6)[-c(6,7,9)]
s.data.all$grp <- (floor((s.data.all$X.run.number.-1) / 20)) + 1
s.data <- s.data.all %>% filter(c1_mult >= c2_mult)
s.num <- 0.03
s.data.4 <- s.data %>% filter(abs(R - 0.4) <= s.num)
temp.4 <- which.max(table(s.data.4$grp))
s.idx.4 <- (20 * as.numeric(names(temp.4))) # Best sequence is s.data.all[,]
s.data.all[s.idx.4,]
table(s.data.4$grp)
View(s.data.all)
s.data.all <- read.csv("Bees R sparse testing_10rep-table.csv", header = TRUE, skip = 6)[-c(6,7,9)]
s.data.all$grp <- (floor((s.data.all$X.run.number.-1) / 10)) + 1
s.data <- s.data.all %>% filter(c1_mult >= c2_mult)
View(s.data)
View(s.data.all)
s.num <- 0.03
s.data.all <- read.csv("Bees R sparse testing_10rep-table.csv", header = TRUE, skip = 6)[-c(6,7,9)]
s.data.all$grp <- (floor((s.data.all$X.run.number.-1) / 10)) + 1
s.data <- s.data.all %>% filter(c1_mult >= c2_mult)
s.num <- 0.03
s.data.4 <- s.data %>% filter(abs(R - 0.4) <= s.num)
temp.4 <- which.max(table(s.data.4$grp))
s.idx.4 <- (10 * as.numeric(names(temp.4))) # Best sequence is s.data.all[,]
s.data.all[s.idx.4,]
table(s.data.4$grp)
s.num <- 0.05
s.data.4 <- s.data %>% filter(abs(R - 0.4) <= s.num)
temp.4 <- which.max(table(s.data.4$grp))
s.idx.4 <- (10 * as.numeric(names(temp.4))) # Best sequence is s.data.all[,]
s.data.all[s.idx.4,]
table(s.data.4$grp)
temp.4 <- which.max(table(s.data.4$grp))
s.idx.4 <- (10 * as.numeric(names(temp.4))) # Best sequence is s.data.all[,]
temp.4
s.data.4 <- s.data %>% filter(abs(R - 0.4) <= s.num)
temp.4 <- which.max(table(s.data.4$grp))
s.idx.4 <- (10 * as.numeric(names(temp.4))) # Best sequence is s.data.all[,]
table(s.data.4$grp)
s.num <- 0.03
s.data.4 <- s.data %>% filter(abs(R - 0.4) <= s.num)
table(s.data.4$grp)
s.num <- 0.05
s.data.4 <- s.data %>% filter(abs(R - 0.4) <= s.num)
temp.4 <- which.max(table(s.data.4$grp))
s.idx.4 <- (10 * as.numeric(names(temp.4))) # Best sequence is s.data.all[,]
s.data.all[s.idx.4,]
s.data.6 <- s.data %>% filter(abs(R - 0.6) <= s.num)
temp.6 <- which.max(table(s.data.6$grp)) # Best sequence is s.data.all[,]
s.idx.6 <- 10 * as.numeric(names(temp.6))
s.data.all[s.idx.6,]
table(s.data.6$grp)
s.data.8 <- s.data %>% filter(abs(R - 0.8) <= s.num)
temp.8 <- which.max(table(s.data.8$grp)) # Best sequence is s.data.all[,]
s.idx.8 <- 10 * as.numeric(names(temp.8))
s.data.all[s.idx.8,]
table(s.data.8$grp)
s.data.all[s.idx.4,]
s.data.all[s.idx.6,]
s.data.all[s.idx.8,]
s.data.4 <- s.data %>% filter(abs(R - 0.4) <= s.num)
temp.4 <- which.max(table(s.data.4$grp))
s.idx.4 <- (10 * as.numeric(names(temp.4))) # Best sequence is s.data.all[4831:4840,]
s.data.all[s.idx.4,]
s.num <- 0.01
s.data.4 <- s.data %>% filter(abs(R - 0.4) <= s.num)
temp.4 <- which.max(table(s.data.4$grp))
s.idx.4 <- (10 * as.numeric(names(temp.4))) # Best sequence is s.data.all[4831:4840,]
s.data.all[s.idx.4,]
table(s.data.4$grp)
s.num <- 0.05
s.data.4 <- s.data %>% filter(abs(R - 0.4) <= s.num)
temp.4 <- which.max(table(s.data.4$grp))
s.idx.4 <- (10 * as.numeric(names(temp.4))) # Best sequence is s.data.all[4831:4840,]
s.data.all[s.idx.4,]
source('~/Google Drive/Semester 8/Thesis/NetLogo+R GitHub/NetLogo R Analyses/Spacial Statistics.R')
source('~/Google Drive/Semester 8/Thesis/NetLogo+R GitHub/NetLogo R Analyses/Spacial Statistics.R')
source('~/Google Drive/Semester 8/Thesis/NetLogo+R GitHub/NetLogo R Analyses/Spacial Statistics.R')
source('~/Google Drive/Semester 8/Thesis/NetLogo+R GitHub/NetLogo R Analyses/Spacial Statistics.R')
s.data.all[s.idx.4,]
s.data.all[s.idx.6,]
s.data.all[s.idx.8,]
d.data <- d.data.all %>% filter(c1_mult > c2_mult)
d.num <- 0.01
d.data.4 <- d.data %>% filter(abs(R - 0.4) <= d.num)
temp.4 <- which.max(table(d.data.4$grp))
d.idx.4 <- (20 * as.numeric(names(temp.4))) # Best sequence is d.data.all[3941:3960,]
d.data.all[d.idx.4,]
d.data.6 <- d.data %>% filter(abs(R - 0.6) <= d.num)
temp.6 <- which.max(table(d.data.6$grp)) # Best sequence is d.data.all[1581:1600,]
d.idx.6 <- 20 * as.numeric(names(temp.6))
d.data.all[d.idx.6,]
d.data.8 <- d.data %>% filter(abs(R - 0.8) <= d.num)
temp.8 <- which.max(table(d.data.8$grp)) # Best sequence is d.data.all[821:840,]
d.idx.8 <- 20 * as.numeric(names(temp.8))
d.data.all[d.idx.8,]
s.data.all <- read.csv("Bees R sparse testing_10rep-table.csv", header = TRUE, skip = 6)[-c(6,7,9)]
s.data.all$grp <- (floor((s.data.all$X.run.number.-1) / 10)) + 1
s.data <- s.data.all %>% filter(c1_mult > c2_mult)
## Divide data into groups s.num away from: R = 0.4, 0.6, 0.8
s.num <- 0.05
s.data.4 <- s.data %>% filter(abs(R - 0.4) <= s.num)
temp.4 <- which.max(table(s.data.4$grp))
s.idx.4 <- (10 * as.numeric(names(temp.4))) # Best sequence is s.data.all[4831:4840,]
s.data.all[s.idx.4,]
s.data.6 <- s.data %>% filter(abs(R - 0.6) <= s.num)
temp.6 <- which.max(table(s.data.6$grp)) # Best sequence is s.data.all[5741:5750,]
s.idx.6 <- 10 * as.numeric(names(temp.6))
s.data.all[s.idx.6,]
s.data.8 <- s.data %>% filter(abs(R - 0.8) <= s.num)
temp.8 <- which.max(table(s.data.8$grp)) # Best sequence is s.data.all[3381:3390,]
s.idx.8 <- 10 * as.numeric(names(temp.8))
s.data.all[s.idx.8,]
setwd("~/Google Drive/Semester 8/Thesis/NetLogo+R GitHub/BehaviorSpace Data/R Value/")
d.data.all <- read.csv("Bees R dense testing-table.csv", header = TRUE, skip = 6)[-c(6,7,9)]
d.data.all$grp <- (floor((d.data.all$X.run.number.-1) / 20)) + 1
d.data <- d.data.all %>% filter(c1_mult > c2_mult)
## Divide data into groups d.num away from: R = 0.4, 0.6, 0.8
d.num <- 0.03
d.data.4 <- d.data %>% filter(abs(R - 0.4) <= d.num)
temp.4 <- which.max(table(d.data.4$grp))
d.idx.4 <- (20 * as.numeric(names(temp.4))) # Best sequence is d.data.all[3941:3960,]
d.data.all[d.idx.4,]
d.data.6 <- d.data %>% filter(abs(R - 0.6) <= d.num)
temp.6 <- which.max(table(d.data.6$grp)) # Best sequence is d.data.all[1581:1600,]
d.idx.6 <- 20 * as.numeric(names(temp.6))
d.data.all[d.idx.6,]
d.data.8 <- d.data %>% filter(abs(R - 0.8) <= d.num)
temp.8 <- which.max(table(d.data.8$grp)) # Best sequence is d.data.all[821:840,]
d.idx.8 <- 20 * as.numeric(names(temp.8))
d.data.all[d.idx.8,]
d.num <- 0.03
d.data.4 <- d.data %>% filter(abs(R - 0.4) <= d.num)
temp.4 <- which.max(table(d.data.4$grp))
table(d.data.4$grp)
d.idx.4 <- (20 * as.numeric(names(temp.4)))
d.data.all[d.idx.4,] # Best sequence is d.data.all[3941:3960,]
d.data.6 <- d.data %>% filter(abs(R - 0.6) <= d.num)
temp.6 <- which.max(table(d.data.6$grp))
table(d.data.6$grp)
d.idx.6 <- 20 * as.numeric(names(temp.6))
d.data.all[d.idx.6,] # Best sequence is d.data.all[1581:1600,]
d.data.8 <- d.data %>% filter(abs(R - 0.8) <= d.num)
temp.8 <- which.max(table(d.data.8$grp))
table(d.data.8$grp)
d.idx.8 <- 20 * as.numeric(names(temp.8))
d.data.all[d.idx.8,] # Best sequence is d.data.all[821:840,]
198*20
d.data.all[2221:2240,]
s.num <- 0.03
s.data.4 <- s.data %>% filter(abs(R - 0.4) <= s.num)
temp.4 <- which.max(table(s.data.4$grp))
table(s.data.4$grp)
s.idx.4 <- (10 * as.numeric(names(temp.4)))
s.data.all[s.idx.4,] # Best sequence is s.data.all[4831:4840,]
s.data.6 <- s.data %>% filter(abs(R - 0.6) <= s.num)
temp.6 <- which.max(table(s.data.6$grp))
table(s.data.6$grp)
s.idx.6 <- 10 * as.numeric(names(temp.6))
s.data.all[s.idx.6,] # Best sequence is s.data.all[5741:5750,]
s.data.8 <- s.data %>% filter(abs(R - 0.8) <= s.num)
temp.8 <- which.max(table(s.data.8$grp))
table(s.data.8$grp)
s.idx.8 <- 10 * as.numeric(names(temp.8))
s.data.all[s.idx.8,] # Best sequence is s.data.all[3381:3390,]
s.data.all <- read.csv("Bees R sparse testing_10rep-table.csv", header = TRUE, skip = 6)[-c(6,7,9)]
s.data.all$grp <- (floor((s.data.all$X.run.number.-1) / 10)) + 1
s.data <- s.data.all %>% filter(c1_mult > c2_mult)
## Divide data into groups s.num away from: R = 0.4, 0.6, 0.8
s.num <- 0.03
s.data.4 <- s.data %>% filter(abs(R - 0.4) <= s.num)
temp.4 <- which.max(table(s.data.4$grp))
table(s.data.4$grp)
s.idx.4 <- (10 * as.numeric(names(temp.4)))
s.data.all[s.idx.4,] # Best sequence is s.data.all[4831:4840,]
s.data.6 <- s.data %>% filter(abs(R - 0.6) <= s.num)
temp.6 <- which.max(table(s.data.6$grp))
table(s.data.6$grp)
s.idx.6 <- 10 * as.numeric(names(temp.6))
s.data.all[s.idx.6,] # Best sequence is s.data.all[5741:5750,]
s.data.8 <- s.data %>% filter(abs(R - 0.8) <= s.num)
temp.8 <- which.max(table(s.data.8$grp))
table(s.data.8$grp)
s.idx.8 <- 10 * as.numeric(names(temp.8))
s.data.all[s.idx.8,] # Best sequence is s.data.all[3381:3390,]
s.num <- 0.05
s.data.4 <- s.data %>% filter(abs(R - 0.4) <= s.num)
temp.4 <- which.max(table(s.data.4$grp))
table(s.data.4$grp)
s.idx.4 <- (10 * as.numeric(names(temp.4)))
s.data.all[s.idx.4,] # Best sequence is s.data.all[4831:4840,]
s.data.6 <- s.data %>% filter(abs(R - 0.6) <= s.num)
temp.6 <- which.max(table(s.data.6$grp))
table(s.data.6$grp)
s.idx.6 <- 10 * as.numeric(names(temp.6))
s.data.all[s.idx.6,] # Best sequence is s.data.all[5741:5750,]
s.data.8 <- s.data %>% filter(abs(R - 0.8) <= s.num)
temp.8 <- which.max(table(s.data.8$grp))
table(s.data.8$grp)
s.idx.8 <- 10 * as.numeric(names(temp.8))
s.data.all[s.idx.8,] # Best sequence is s.data.all[3381:3390,]
s.num <- 0.03
s.data.4 <- s.data %>% filter(abs(R - 0.4) <= s.num)
temp.4 <- which.max(table(s.data.4$grp))
table(s.data.4$grp)
s.idx.4 <- (10 * as.numeric(names(temp.4)))
s.data.all[s.idx.4,] # Best sequence is s.data.all[4831:4840,]
s.data.6 <- s.data %>% filter(abs(R - 0.6) <= s.num)
temp.6 <- which.max(table(s.data.6$grp))
table(s.data.6$grp)
s.idx.6 <- 10 * as.numeric(names(temp.6))
s.data.all[s.idx.6,] # Best sequence is s.data.all[5741:5750,]
s.data.8 <- s.data %>% filter(abs(R - 0.8) <= s.num)
temp.8 <- which.max(table(s.data.8$grp))
table(s.data.8$grp)
s.idx.8 <- 10 * as.numeric(names(temp.8))
s.data.all[s.idx.8,] # Best sequence is s.data.all[3381:3390,]
algae <- read.csv(url("http://www.zoology.ubc.ca/~schluter/WhitlockSchluter/wp-content/data/chapter18/chap18e3IntertidalAlgae.csv"))
head(algae)
View(algae)
View(algae)
algaeLow <- filter(algaeLow, height = "low")
algaeLow <- filter(algae, height = "low")
algaeLow <- filter(algae, height == "low")
head(algaeLow)
algaeLow <- filter(algae, algae$height == "low")
head(algaeLow)
algae <- read.csv(url("http://www.zoology.ubc.ca/~schluter/WhitlockSchluter/wp-content/data/chapter18/chap18e3IntertidalAlgae.csv"))
algaeLow <- filter(algae, algae$height == "low")
head(algaeLow)
algaeLow <- algae[algae$height=="low",]
beta0 <- mean(algaeLow$sqrtArea)
beta0
View(algaeLow)
ss <- sum((algaeLow$sqrtArea-beta0)^2)
ss
beta0 <- mean(algaeLow$sqrtArea)+1
beta0
ss <- sum((algaeLow$sqrtArea-beta0)^2)
ss
beta0 <- mean(algaeLow$sqrtArea)-1
beta0
ss <- sum((algaeLow$sqrtArea-beta0)^2)
ss
?predict
algaeLowNullModel <- lm(sqrtArea ~ 1, data=algaeLow)
lineWidth <- 0.15
stripchart(sqrtArea ~ herbivores, data = algaeLow, method = "jitter",
vertical = TRUE, las = 1, pch = 1, xlab = "Herbivore treatment",
ylab = "Area of algae (square root transformed)", col = "firebrick",
cex = 1.2)
xpts <- as.numeric(algaeLow$herbivores)
ypts <- predict(algaeLowNullModel)
segments(xpts - lineWidth, ypts, xpts + lineWidth, ypts, lty = 2)
stripchart(sqrtArea ~ herbivores, data = algaeLow, method = "jitter",
vertical = TRUE, las = 1, pch = 1, xlab = "Herbivore treatment",
ylab = "Area of algae (square root transformed)", col = "firebrick",
cex = 1.2)
xpts <- as.numeric(algaeLow$herbivores)
ypts <- predict(algaeLowNullModel)
segments(xpts - lineWidth, ypts, xpts + lineWidth, ypts, lty = 2)
stripchart(sqrtArea ~ herbivores, data = algaeLow, method = "jitter",
vertical = TRUE, las = 1, pch = 1, xlab = "Herbivore treatment",
ylab = "Area of algae (square root transformed)", col = "firebrick",
cex = 1.2)
stripchart(sqrtArea ~ herbivores, data = algaeLow, method = "jitter",
vertical = TRUE, las = 1, pch = 1, xlab = "Herbivore treatment",
ylab = "Area of algae (square root transformed)", col = "firebrick",
cex = 1.2)
xpts <- as.numeric(algaeLow$herbivores)
ypts <- predict(algaeLowNullModel)
segments(xpts - lineWidth, ypts, xpts + lineWidth, ypts, lty = 2)
?segments
View(algaeLow)
algaeLowHerbModel <- lm(sqrtArea~herbivores, data = algaeLow)
algaeLowHerbModel
ypts <- predict(algaeLowHerbModel)
predict(algaeLowHerbModel, newdata = algaeLow)
View(algaeLow)
test <- algaeLow
test$herbivores[3] = "plus"
View(test)
predict(algaeLowHerbModel, newdata = test)
sum((algaeLow$sqrtArea - predict(algaeLowHerbModel))^2)
algae <- read.csv(url("http://www.zoology.ubc.ca/~schluter/WhitlockSchluter/wp-content/data/chapter18/chap18e3IntertidalAlgae.csv"))
algaeLow <- algae[algae$height=="low",]
algaeLowNullModel <- lm(sqrtArea ~ 1, data=algaeLow)
algaeLowHerbModel <- lm(sqrtArea~herbivores, data = algaeLow)
ssWithin <- sum((algaeLow$sqrtArea - predict(algaeLowHerbModel))^2)
c(1,2,3) - 1
ssAmong <- unique(predict(algaeLowHerbModel)) - mean(algaeLow$sqrtArea)
dfAmong <- 2-1
msAmong <- ssAmong / dfAmong
msAmong
ssAmong <- sum(unique(predict(algaeLowHerbModel)) - mean(algaeLow$sqrtArea))
dfAmong <- 2-1
msAmong <- ssAmong / dfAmong
msAmong
?pf
msWithin <- ssWithin / dfWithin
ssWithin <- sum((algaeLow$sqrtArea - predict(algaeLowHerbModel))^2)
# Caluculate the degrees of freedom
dfWithin <- nrow(algaeLow) - 2 #-2 because we have 2 groups
# Calculate the mean square: sum of squares divided by the degrees of freedom
msWithin <- ssWithin / dfWithin
fratio <- msAmong / msWithin
pval <- pf(fratio)
pval <- pf(fratio, dfAmong, dfWithin)
pf(fratio, dfAmong, dfWithin)
pval <- pf(fratio, dfWithin, dfAmong)
ssAmong <- sum((unique(predict(algaeLowHerbModel)) - mean(algaeLow$sqrtArea))^2)
dfAmong <- 2-1
msAmong <- ssAmong / dfAmong
msAmong
fratio <- msAmong / msWithin
pval <- pf(fratio, dfAmong, dfWithin)
ssWithin/ssAmong
pval <- pf(fratio, dfAmong, dfWithin)
View(algaeLow)
?lm
mean(algae$sqrtArea)
algae <- read.csv(url("http://www.zoology.ubc.ca/~schluter/WhitlockSchluter/wp-content/data/chapter18/chap18e3IntertidalAlgae.csv"))
algaeNoInteractModel <- lm(sqrtArea ~ herbivores + height, data = algae)
interaction.plot(algae$herbivores, algae$height, response = predict(algaeNoInteractModel),
ylim = range(algae$sqrtArea), trace.label = "Height", las = 1,
ylab = "Square root surface area (cm)", xlab = "Herbivore treatment")
adjustAmount = 0.05
points(sqrtArea ~ c(jitter(as.numeric(herbivores), factor = 0.2) + adjustAmount),
data = subset(algae, height == "low"))
points(sqrtArea ~ c(jitter(as.numeric(herbivores), factor = 0.2) - adjustAmount),
data = subset(algae, height == "mid"), pch = 16)
algaeNoInteractModel
line(y=26.52, col = "red")
?line
abline(y = 26.52, col = "red")
?abline
abline(v = 26.52, col = "red")
abline(v = 26.52, col = "red")
interaction.plot(algae$herbivores, algae$height, response = predict(algaeNoInteractModel),
ylim = range(algae$sqrtArea), trace.label = "Height", las = 1,
ylab = "Square root surface area (cm)", xlab = "Herbivore treatment")
algaeNoInteractModel
source('~/Google Drive/Semester 8/Thesis/NetLogo+R GitHub/NetLogo R Analyses/Spacial Statistics.R')
### Dense Testing
d.data.all <- read.csv("Bees R dense testing-table.csv", header = TRUE, skip = 6)[-c(6,7,9)]
d.data.all$grp <- (floor((d.data.all$X.run.number.-1) / 20)) + 1
d.data <- d.data.all %>% filter(c1_mult > c2_mult)
## Divide data into groups d.num away from: R = 0.4, 0.6, 0.8
d.num <- 0.03
d.data.4 <- d.data %>% filter(abs(R - 0.4) <= d.num)
temp.4 <- which.max(table(d.data.4$grp))
table(d.data.4$grp)
d.idx.4 <- (20 * as.numeric(names(temp.4)))
d.data.all[d.idx.4,] # Best sequence is d.data.all[3941:3960,]
d.data.6 <- d.data %>% filter(abs(R - 0.6) <= d.num)
temp.6 <- which.max(table(d.data.6$grp))
table(d.data.6$grp)
d.idx.6 <- 20 * as.numeric(names(temp.6))
d.data.all[d.idx.6,] # Best sequence is d.data.all[2221:2240,]
d.data.8 <- d.data %>% filter(abs(R - 0.8) <= d.num)
temp.8 <- which.max(table(d.data.8$grp))
table(d.data.8$grp)
d.idx.8 <- 20 * as.numeric(names(temp.8))
d.data.all[d.idx.8,] # Best sequence is d.data.all[821:840,]
algae <- read.csv(url("http://www.zoology.ubc.ca/~schluter/WhitlockSchluter/wp-content/data/chapter18/chap18e3IntertidalAlgae.csv"))
lm(sqrtArea ~ herbivores + height, data = algae)
algaeNoInteractModel <- lm(sqrtArea ~ herbivores + height, data = algae)
interaction.plot(algae$herbivores, algae$height, response = predict(algaeNoInteractModel),
ylim = range(algae$sqrtArea), trace.label = "Height", las = 1,
ylab = "Square root surface area (cm)", xlab = "Herbivore treatment")
adjustAmount = 0.05
points(sqrtArea ~ c(jitter(as.numeric(herbivores), factor = 0.2) + adjustAmount),
data = subset(algae, height == "low"))
points(sqrtArea ~ c(jitter(as.numeric(herbivores), factor = 0.2) - adjustAmount),
data = subset(algae, height == "mid"), pch = 16)
mean(algae[algae$height=="low" & algae$herbivores=="minus"]$sqrtArea)
mean(algae[algae$height=="low" & algae$herbivores=="minus",]$sqrtArea)
mean(algae[algae$height=="low" & algae$herbivores=="plus",]$sqrtArea)
mean(algae[algae$height=="high" & algae$herbivores=="plus",]$sqrtArea)
mean(algae[algae$height=="high" & algae$herbivores=="minus",]$sqrtArea)
mean(algae[algae$height=="low" & algae$herbivores=="minus",]$sqrtArea)
mean(algae[algae$height=="low" & algae$herbivores=="plus",]$sqrtArea)
mean(algae[algae$height=="mid" & algae$herbivores=="plus",]$sqrtArea)
mean(algae[algae$height=="mid" & algae$herbivores=="minus",]$sqrtArea)
## Sparse Testing
s.data.all <- read.csv("Bees R sparse testing_10rep-table.csv", header = TRUE, skip = 6)[-c(6,7,9)]
s.data.all$grp <- (floor((s.data.all$X.run.number.-1) / 10)) + 1
s.data <- s.data.all %>% filter(c1_mult > c2_mult)
## Divide data into groups s.num away from: R = 0.4, 0.6, 0.8
s.num <- 0.03
s.data.4 <- s.data %>% filter(abs(R - 0.4) <= s.num)
temp.4 <- which.max(table(s.data.4$grp))
table(s.data.4$grp)
s.idx.4 <- (10 * as.numeric(names(temp.4)))
s.data.all[s.idx.4,] # Best sequence is s.data.all[4831:4840,]
s.data.6 <- s.data %>% filter(abs(R - 0.6) <= s.num)
temp.6 <- which.max(table(s.data.6$grp))
table(s.data.6$grp)
s.idx.6 <- 10 * as.numeric(names(temp.6))
s.data.all[s.idx.6,] # Best sequence is s.data.all[5741:5750,]
s.data.8 <- s.data %>% filter(abs(R - 0.8) <= s.num)
temp.8 <- which.max(table(s.data.8$grp))
table(s.data.8$grp)
s.idx.8 <- 10 * as.numeric(names(temp.8))
s.data.all[s.idx.8,] # Best sequence is s.data.all[3381:3390,]
### Sparse Testing
s.data.all <- read.csv("Bees R sparse testing_10rep-table.csv", header = TRUE, skip = 6)[-c(6,7,9)]
s.data.all$grp <- (floor((s.data.all$X.run.number.-1) / 10)) + 1
s.data <- s.data.all %>% filter(c1_mult > c2_mult)
## Divide data into groups s.num away from: R = 0.4, 0.6, 0.8
s.num <- 0.03
s.data.4 <- s.data %>% filter(abs(R - 0.4) <= s.num)
temp.4 <- which.max(table(s.data.4$grp))
table(s.data.4$grp)
s.idx.4 <- (10 * as.numeric(names(temp.4)))
s.data.all[s.idx.4,] # Best sequence is s.data.all[4721:4730,]
s.data.6 <- s.data %>% filter(abs(R - 0.6) <= s.num)
temp.6 <- which.max(table(s.data.6$grp))
table(s.data.6$grp)
s.idx.6 <- 10 * as.numeric(names(temp.6))
s.data.all[s.idx.6,] # Best sequence is s.data.all[5741:5750,]
s.data.8 <- s.data %>% filter(abs(R - 0.8) <= s.num)
temp.8 <- which.max(table(s.data.8$grp))
table(s.data.8$grp)
s.idx.8 <- 10 * as.numeric(names(temp.8))
s.data.all[s.idx.8,] # Best sequence is s.data.all[3381:3390,]
### Sparse Testing
s.data.all <- read.csv("Bees R sparse testing_10rep-table.csv", header = TRUE, skip = 6)[-c(6,7,9)]
s.data.all$grp <- (floor((s.data.all$X.run.number.-1) / 10)) + 1
s.data <- s.data.all %>% filter(c1_mult > c2_mult)
## Divide data into groups s.num away from: R = 0.4, 0.6, 0.8
s.num <- 0.03
s.data.4 <- s.data %>% filter(abs(R - 0.4) <= s.num)
temp.4 <- which.max(table(s.data.4$grp))
table(s.data.4$grp)
s.idx.4 <- (10 * as.numeric(names(temp.4)))
s.data.all[s.idx.4,] # Best sequence is s.data.all[4721:4730,]
s.data.6 <- s.data %>% filter(abs(R - 0.6) <= s.num)
temp.6 <- which.max(table(s.data.6$grp))
table(s.data.6$grp)
s.idx.6 <- 10 * as.numeric(names(temp.6))
s.data.all[s.idx.6,] # Best sequence is s.data.all[5741:5750,]
s.data.8 <- s.data %>% filter(abs(R - 0.8) <= s.num)
temp.8 <- which.max(table(s.data.8$grp))
table(s.data.8$grp)
s.idx.8 <- 10 * as.numeric(names(temp.8))
s.data.all[s.idx.8,] # Best sequence is s.data.all[3381:3390,]
s.data.all[4721:4730,]
s.data.all <- read.csv("Bees R sparse testing_10rep-table.csv", header = TRUE, skip = 6)[-c(6,7,9)]
s.data.all$grp <- (floor((s.data.all$X.run.number.-1) / 10)) + 1
s.data <- s.data.all %>% filter(c1_mult > c2_mult)
## Divide data into groups s.num away from: R = 0.4, 0.6, 0.8
s.num <- 0.05
s.data.4 <- s.data %>% filter(abs(R - 0.4) <= s.num)
temp.4 <- which.max(table(s.data.4$grp))
table(s.data.4$grp)
s.idx.4 <- (10 * as.numeric(names(temp.4)))
s.data.all[s.idx.4,] # Best sequence is s.data.all[4721:4730,]
s.data.6 <- s.data %>% filter(abs(R - 0.6) <= s.num)
temp.6 <- which.max(table(s.data.6$grp))
table(s.data.6$grp)
s.idx.6 <- 10 * as.numeric(names(temp.6))
s.data.all[s.idx.6,] # Best sequence is s.data.all[5741:5750,]
s.data.8 <- s.data %>% filter(abs(R - 0.8) <= s.num)
temp.8 <- which.max(table(s.data.8$grp))
table(s.data.8$grp)
s.idx.8 <- 10 * as.numeric(names(temp.8))
s.data.all[s.idx.8,] # Best sequence is s.data.all[3381:3390,]
s.data.all[4381:5390,]
s.data.all[5381:5390,]
s.data.all <- read.csv("Bees R sparse testing_10rep-table.csv", header = TRUE, skip = 6)[-c(6,7,9)]
s.data.all$grp <- (floor((s.data.all$X.run.number.-1) / 10)) + 1
s.data <- s.data.all %>% filter(c1_mult > c2_mult)
## Divide data into groups s.num away from: R = 0.4, 0.6, 0.8
s.num <- 0.05
s.data.4 <- s.data %>% filter(abs(R - 0.4) <= s.num)
temp.4 <- which.max(table(s.data.4$grp))
table(s.data.4$grp)
s.idx.4 <- (10 * as.numeric(names(temp.4)))
s.data.all[s.idx.4,] # Best sequence is s.data.all[4721:4730,]
s.data.6 <- s.data %>% filter(abs(R - 0.6) <= s.num)
temp.6 <- which.max(table(s.data.6$grp))
table(s.data.6$grp)
s.idx.6 <- 10 * as.numeric(names(temp.6))
s.data.all[s.idx.6,] # Best sequence is s.data.all[5741:5750,]
s.data.8 <- s.data %>% filter(abs(R - 0.8) <= s.num)
temp.8 <- which.max(table(s.data.8$grp))
table(s.data.8$grp)
s.idx.8 <- 10 * as.numeric(names(temp.8))
s.data.all[s.idx.8,] # Best sequence is s.data.all[3381:3390,]
source('~/Google Drive/Semester 8/Thesis/NetLogo+R GitHub/NetLogo R Analyses/Spacial Statistics.R')
View(s.data.4)
max(s.data$c1_mult)
source('~/Google Drive/Semester 8/Thesis/NetLogo+R GitHub/NetLogo R Analyses/Spacial Statistics.R')
